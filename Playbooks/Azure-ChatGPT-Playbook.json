{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "PlaybookName": {
            "defaultValue": "Azure-ChatGPT-Playbook",
            "type": "string"
        }
    },
    "variables": {
        "MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', parameters('PlaybookName'))]",
        "AzuremonitorlogsConnectionName": "[concat('Azuremonitorlogs-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "properties": {
                "provisioningState": "Succeeded",
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Microsoft_Sentinel_incident": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Initialize_variable_-_ChatGPT_URI": {
                            "runAfter": {
                                "Entities_-_Get_Accounts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ChatGPT URI",
                                        "type": "string",
                                        "value": "CHATGPT-ENDPOINT"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable__API_KEY": {
                            "runAfter": {
                                "Initialize_variable_-_ChatGPT_URI": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "API KEY",
                                        "type": "string",
                                        "value": "CHATGPT-API-KEY"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_ChatGPT_Role": {
                            "runAfter": {
                                "For_each_1": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ChatGPT Role",
                                        "type": "string",
                                        "value": "Assist a cybersecurity expert with investigations by analyzing, interpreting, and organizing data, offering structured insights, and providing actionable recommendations. Use clear reasoning, factual information, and validate findings before presenting conclusions.\n\n# Capabilities and Scope\n\nThe AI assistant should:\n\n1. **Data Analysis**: Analyze logs, threat reports, system traces, network data, and other cybersecurity artifacts.\n2. **Threat Identification**: Detect anomalies, patterns, or indicators of compromise (IoCs) like IP addresses, file hashes, domains, and processes.\n3. **Incident Response Support**: Recommend next steps in incident remediation, escalation, or containment.\n4. **Evidence Organization**: Summarize findings in a structured way suitable for reports, legal compliance, or presentation to technical/non-technical stakeholders.\n5. **Context-Aware Insights**: Tailor suggestions based on the nature of cyber incidents (e.g., malware detection, web application attack, phishing attempt, insider threat).\n6. **Follow a Reasoning-First Approach**: Analyze the provided data thoroughly, demonstrate the reasoning process, and then deliver insights or conclusions.\n\n# Instructions\n\n- **Stay Technical and Concise**: Use technical terms and framework references (e.g., MITRE ATT&CK, OWASP, NIST, etc.) when necessary, but avoid unnecessary jargon.\n- **No Assumptions**: Base findings purely on provided data; do not speculate without evidence.\n- **When Unsure**: Flag the need for further investigation or additional data.\n\n# Steps\n\n1. **Input Parsing**:\n    - Interpret the provided investigation data. This may include logs, traffic data, threat reports, emails, files, or any other relevant sources.\n2. **Initial Observation**:\n    - Look for likely IoCs, anomalies, or patterns. Highlight relationships, trends, or deviations.\n3. **Detailed Analysis**:\n    - Break down findings into categories like malware signatures, activity timelines, or network behavior.\n    - Correlate data with known attack techniques, CVEs (if available), or TTPs (Tactics, Techniques, and Procedures).\n4. **Reason Out Findings**:\n    - Explain why specific data points are suspicious or relevant, referencing specific evidence.\n5. **Conclusion and Next Steps**:\n    - Summarize the findings clearly, indicate confidence levels, and provide actionable recommendations.\n\n# Output Format\n\n- Initial Observations: A brief summary of data insights and potential threats.\n- Findings: A structured list or table of findings (with sources of evidence).\n    - Types of findings: Indicator of Compromises (IoCs), Malware types, Anomalies, Attack attribution, etc.\n- Correlation and Context: Link evidence to frameworks (e.g., MITRE ATT&CK) or historical trends/known exploits.\n- Next Steps:\n    - Containment measures (e.g., isolate machine, block IP, kill processes).\n    - Escalation thresholds (e.g., notify Incident Response team, recommend a forensic investigation).\n    - Remediation plan (e.g., software patching, improved access controls, etc.).\n\n# Examples\n\n## Example 1\n\n### **Input**:\n\nAccess logs from a web server:\n\n```\n192.168.1.10 - - [10/Oct/2023:13:55:36] \"GET /login.php?id=admin' OR 1=1 -- HTTP/1.1\" 200 -\n10.0.0.5 - - [10/Oct/2023:14:10:22] \"POST /api/login HTTP/2.0\" 403 -\n\n```\n\n### **Reasoning**:\n\n1. The GET request appears to include an SQL injection pattern (`' OR 1=1 --`), often employed to bypass authentication.\n2. A POST request following shortly after from a different IP could indicate a reconnaissance scan.\n\n### **Output**:\n\n**Observations**:\n\n1. Evidence of a potential SQL Injection from IP `192.168.1.10`.\n2. Unauthorized POST attempt from `10.0.0.5`.\n\n**Findings**:\n\n| IoC Type | Value | Evidence |\n| --- | --- | --- |\n| Malicious IP | 192.168.1.10 | SQLi payload in URL |\n| Unauthorized Access | 10.0.0.5 | Repeated POST requests with 403 response |\n\n**Next Steps**:\n\n- Block IP `192.168.1.10` at the web server's firewall.\n- Review access logs for additional patterns from the same IP.\n- Conduct further log analysis for insider threats or privilege escalation.\n\n---\n\n**NOTE**: Adjust the example output for real-world complexity. Logs might be significantly longer; placeholders like `[LONGER LOG SAMPLE X HERE]` can represent such cases.\n\n# Notes\n\n- For fraud detection: Include financial reports, geo-based anomalies, or usage analysis.\n- For file scanning: Provide hashes for analysis in VirusTotal or detection engines.\n- Special consideration for emergent threats: Prioritize details on zero-day exploits or widespread campaigns."
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_ChatGPT_Prompt": {
                            "runAfter": {
                                "Initialize_variable_-_ChatGPT_Role": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ChatGPT Prompt",
                                        "type": "string",
                                        "value": "Analyze following cyber security incident and evaluate how likely is given detection benign posivite or an active threat. You will be given details about the incident and also logs related to give user for his sign in history and changes to authentication method. If logs are available or Sign In history is clear, it should be good indicator that incident might be benign positive. If incident entity has IP address, which was previously used by the user, it's also indicator that given detection is false positive. Evaluate everything and write detailed analysis. Actionable next steps, if needed and Score from 0 - 100 how likely is incident benign or threat (higher score means very likely a threat and immidiate action should be done)\n\nIncident Details:\n------------------\nIncident Title: @{triggerBody()?['object']?['properties']?['title']}\nIncident Description: @{triggerBody()?['object']?['properties']?['description']}\nEntities associated with current incident: @{triggerBody()?['object']?['properties']?['relatedEntities']}\n------------------\nAssociated Activities\n------------------\n\nSign in history for the user : @{variables('Sign In History')}\nMFA Changes: @{variables('MFA Audit')}"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_ChatGPT_Response": {
                            "runAfter": {
                                "Initialize_variable_-_ChatGPT_Prompt": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ChatGPT Response",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "HTTP_-_Call_ChatGPT": {
                            "runAfter": {
                                "Initialize_variable_-_ChatGPT_Response": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "uri": "@variables('ChatGPT URI')",
                                "method": "POST",
                                "headers": {
                                    "Content-Type": "application/json",
                                    "api-key": "@{variables('API KEY')}"
                                },
                                "body": {
                                    "model": "gpt-4o",
                                    "messages": [
                                        {
                                            "role": "system",
                                            "content": [
                                                {
                                                    "type": "text",
                                                    "text": "@{variables('ChatGPT Role')}"
                                                }
                                            ]
                                        },
                                        {
                                            "role": "user",
                                            "content": [
                                                {
                                                    "type": "text",
                                                    "text": "@{variables('ChatGPT Prompt')}"
                                                }
                                            ]
                                        }
                                    ],
                                    "response_format": {
                                        "type": "text"
                                    },
                                    "temperature": 0.7,
                                    "max_completion_tokens": 8000,
                                    "top_p": 0.5,
                                    "frequency_penalty": 0,
                                    "presence_penalty": 0
                                }
                            },
                            "runtimeConfiguration": {
                                "contentTransfer": {
                                    "transferMode": "Chunked"
                                }
                            }
                        },
                        "Parse_JSON": {
                            "runAfter": {
                                "HTTP_-_Call_ChatGPT": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('HTTP_-_Call_ChatGPT')",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        },
                                        "object": {
                                            "type": "string"
                                        },
                                        "created": {
                                            "type": "integer"
                                        },
                                        "model": {
                                            "type": "string"
                                        },
                                        "choices": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "index": {
                                                        "type": "integer"
                                                    },
                                                    "message": {
                                                        "type": "object",
                                                        "properties": {
                                                            "role": {
                                                                "type": "string"
                                                            },
                                                            "content": {
                                                                "type": "string"
                                                            },
                                                            "refusal": {}
                                                        }
                                                    },
                                                    "logprobs": {},
                                                    "finish_reason": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "index",
                                                    "message",
                                                    "logprobs",
                                                    "finish_reason"
                                                ]
                                            }
                                        },
                                        "usage": {
                                            "type": "object",
                                            "properties": {
                                                "prompt_tokens": {
                                                    "type": "integer"
                                                },
                                                "completion_tokens": {
                                                    "type": "integer"
                                                },
                                                "total_tokens": {
                                                    "type": "integer"
                                                },
                                                "prompt_tokens_details": {
                                                    "type": "object",
                                                    "properties": {
                                                        "cached_tokens": {
                                                            "type": "integer"
                                                        },
                                                        "audio_tokens": {
                                                            "type": "integer"
                                                        }
                                                    }
                                                },
                                                "completion_tokens_details": {
                                                    "type": "object",
                                                    "properties": {
                                                        "reasoning_tokens": {
                                                            "type": "integer"
                                                        },
                                                        "audio_tokens": {
                                                            "type": "integer"
                                                        },
                                                        "accepted_prediction_tokens": {
                                                            "type": "integer"
                                                        },
                                                        "rejected_prediction_tokens": {
                                                            "type": "integer"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "service_tier": {
                                            "type": "string"
                                        },
                                        "system_fingerprint": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "For_each": {
                            "foreach": "@outputs('Parse_JSON')?['body']?['choices']",
                            "actions": {
                                "Set_variable_-_ChatGPT_Response": {
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "ChatGPT Response",
                                        "value": "@item()?['message']?['content']"
                                    }
                                }
                            },
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Add_comment_to_incident_(V3)": {
                            "runAfter": {
                                "For_each": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "body": {
                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                    "message": "<p class=\"editor-paragraph\">This message was created by ChatGPT and contains recommendation for the incident:</p><br><p class=\"editor-paragraph\">@{variables('ChatGPT Response')}</p><br>"
                                },
                                "path": "/Incidents/Comment"
                            }
                        },
                        "Entities_-_Get_Accounts": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "path": "/entities/account"
                            }
                        },
                        "For_each_1": {
                            "foreach": "@body('Entities_-_Get_Accounts')?['Accounts']",
                            "actions": {
                                "Run_query_and_list_results_-_Sign_In_History": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": "let RecentLogins = \n    SigninLogs\n    | where TimeGenerated >= ago(7d)\n    | where ResultType == 0\n    | where UserPrincipalName =~ '@{concat(item()?['Name'],'@',item()?['UPNSuffix'])}'\n    | distinct IPAddress, UserPrincipalName;\nlet PastLogins = \n    SigninLogs\n    | where TimeGenerated between (ago(90d) .. ago(7d))\n    | where ResultType == 0\n    | where UserPrincipalName =~ '@{concat(item()?['Name'],'@',item()?['UPNSuffix'])}'\n    | distinct IPAddress;\nRecentLogins\n| extend PreviouslyUsedIP = iff(IPAddress in (PastLogins), \"Yes\", \"No\")",
                                        "path": "/queryData",
                                        "queries": {
                                            "subscriptions": "@{triggerBody()?['workspaceInfo']?['SubscriptionId']}",
                                            "resourcegroups": "@{triggerBody()?['workspaceInfo']?['ResourceGroupName']}",
                                            "resourcetype": "Log Analytics Workspace",
                                            "resourcename": "@{triggerBody()?['workspaceInfo']?['WorkspaceName']}",
                                            "timerange": "Set in query"
                                        }
                                    }
                                },
                                "Run_query_and_list_results_-_MFA": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": "AuditLogs\n| where TimeGenerated >= ago(1d)\n| where OperationName has 'User registered security info'\n| where Result == 'success'\n| extend TargetUser = tostring(parse_json(TargetResources)[0].userPrincipalName)\n| where TargetUser =~ '@{concat(item()?['Name'],'@',item()?['UPNSuffix'])}'\n| extend AuthRegIPAddress = parse_json(tostring(InitiatedBy.user)).ipAddress\n| project\n    AuthRegTime = TimeGenerated,\n    UserId = tolower(TargetUser),\n    OperationName,\n    AuthRegResult = Result,\n    AuthRegIPAddress;",
                                        "path": "/queryData",
                                        "queries": {
                                            "subscriptions": "@{triggerBody()?['workspaceInfo']?['SubscriptionId']}",
                                            "resourcegroups": "@{triggerBody()?['workspaceInfo']?['ResourceGroupName']}",
                                            "resourcetype": "Log Analytics Workspace",
                                            "resourcename": "@{triggerBody()?['workspaceInfo']?['WorkspaceName']}",
                                            "timerange": "Set in query"
                                        }
                                    }
                                },
                                "Append_to_string_variable": {
                                    "runAfter": {
                                        "Run_query_and_list_results_-_Sign_In_History": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                        "name": "Sign In History",
                                        "value": "@body('Run_query_and_list_results_-_Sign_In_History')?['value']"
                                    }
                                },
                                "Append_to_string_variable_-_MFA_Audit": {
                                    "runAfter": {
                                        "Run_query_and_list_results_-_MFA": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                        "name": "MFA Audit",
                                        "value": "@body('Run_query_and_list_results_-_MFA')?['value']"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_-_MFA_Audit": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_variable_-_Sign_In_History": {
                            "runAfter": {
                                "Initialize_variable__API_KEY": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Sign In History",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_MFA_Audit": {
                            "runAfter": {
                                "Initialize_variable_-_Sign_In_History": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "MFA Audit",
                                        "type": "string"
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                                "connectionName": "[variables('MicrosoftSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]",
                                "connectionName": "[variables('AzuremonitorlogsConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuremonitorlogs')]"
                            }
                        }
                    }
                }
            },
            "name": "[parameters('PlaybookName')]",
            "type": "Microsoft.Logic/workflows",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('MicrosoftSentinelConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzuremonitorlogsConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('MicrosoftSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('MicrosoftSentinelConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzuremonitorlogsConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzuremonitorlogsConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/Azuremonitorlogs')]"
                }
            }
        }
    ]
}
